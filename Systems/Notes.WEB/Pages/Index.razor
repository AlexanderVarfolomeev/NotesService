@page "/"
@using Notes.WEB
@using Notes.WEB.Pages.TaskTypes.Models
@using Notes.WEB.Pages.TaskTypes.Services
@using MudBlazor.Utilities
@using Notes.WEB.Components
@using Notes.WEB.Pages.TaskTypes
@layout MainLayout


@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ITaskTypeService TaskTypeService


<MudTable Items="@Elements.Take(100)" Hover="true" Breakpoint="Breakpoint.Sm">
    <ToolBarContent>
        <MudButton Variant="Variant.Outlined" OnClick="ReloadData">Reload</MudButton>
        <MudButton Variant="Variant.Outlined" OnClick="AddTaskType">Add note</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Color</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Color">@context.Color.Name</MudTd>
        <MudTd>
            <MudButton Variant="Variant.Outlined" OnClick="@((e) => EditTaskType(context.Id))">Edit</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" OnClick="@((e) => DeleteTaskType(context.Id))">Delete</MudButton>
        </MudTd>

    </RowTemplate>
</MudTable>


@code {
    private IEnumerable<TaskType> Elements = new List<TaskType>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task ReloadData()
    {
        Elements = await TaskTypeService.GetTaskTypes();
    }

    private async Task AddTaskType()
    {
        var parameters = new DialogParameters();

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialog = DialogService.Show<AddTaskTypeDialog>("Add task type", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await TaskTypeService.AddTask(((AddTaskTypeDialog)dialog.Dialog).model);
            await ReloadData();
        }
    }

    private async Task EditTaskType(int taskTypeId)
    {
        var parameters = new DialogParameters();
        parameters.Add("TaskTypeId", taskTypeId);
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialog = DialogService.Show<EditTaskTypeDialog>("Edit task type", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await TaskTypeService.UpdateTask(((EditTaskTypeDialog)dialog.Dialog).model, taskTypeId);
            await ReloadData();
        }
    }

    private async Task DeleteTaskType(int taskTypeId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this task type? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<ConfirmationDialog>("Delete task type", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await TaskTypeService.DeleteTask(taskTypeId);
            await ReloadData();
        }
    }
    
}