@page "/notes"

@using Notes.WEB.Pages.TaskTypes.Models
@using Notes.WEB.Pages.TaskTypes.Services
@using MudBlazor.Utilities
@using Notes.WEB.Components
@using Notes.WEB.Pages.NotesPages.Models
@using Notes.WEB.Pages.NotesPages.Services

@layout MainLayout


@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject INoteService noteService


<MudTable Items="@Elements.Take(100)" Hover="true" Breakpoint="Breakpoint.Sm">
    <ToolBarContent>
        <MudButton Variant="Variant.Outlined" OnClick="ReloadData">Reload</MudButton>
        <MudButton Variant="Variant.Outlined">Add note</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh >Type</MudTh>
        <MudTh >Description</MudTh>
        <MudTh >Start</MudTh>
        <MudTh >End</MudTh>
        <MudTh >Status</MudTh>
        <MudTh >Repetition rate</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Color">@context.Type</MudTd>
        <MudTd DataLabel="Color">@context.Description</MudTd>
        <MudTd DataLabel="Color">@context.StartDateTime</MudTd>
        <MudTd DataLabel="Color">@context.EndDateTime</MudTd>
        <MudTd DataLabel="Color">@context.Status</MudTd>
        <MudTd DataLabel="Color">@context.RepetitionRate</MudTd>
        <MudTd>
            <MudButton Variant="Variant.Outlined">Edit</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Tertiary">Delete</MudButton>
        </MudTd>

    </RowTemplate>
</MudTable>


@code {
    private IEnumerable<Note> Elements = new List<Note>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task ReloadData()
    {
        Elements = await noteService.GetNotes();
    }

    //private async Task AddTaskType()
    //{
    //    var parameters = new DialogParameters();

    //    var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
    //    var dialog = DialogService.Show<AddTaskTypeDialog>("Add task type", parameters, options);
    //    var result = await dialog.Result;

    //    if (!result.Cancelled)
    //    {
    //        await noteService.AddTask(((AddTaskTypeDialog)dialog.Dialog).model);
    //        await ReloadData();
    //    }
    //}

    //private async Task EditTaskType(int taskTypeId)
    //{
    //    var parameters = new DialogParameters();
    //    parameters.Add("TaskTypeId", taskTypeId);
    //    var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
    //    var dialog = DialogService.Show<EditTaskTypeDialog>("Edit task type", parameters, options);
    //    var result = await dialog.Result;

    //    if (!result.Cancelled)
    //    {
    //        await noteService.UpdateTask(((EditTaskTypeDialog)dialog.Dialog).model, taskTypeId);
    //        await ReloadData();
    //    }
    //}

    //private async Task DeleteTaskType(int taskTypeId)
    //{
    //    var parameters = new DialogParameters();
    //    parameters.Add("ContentText", "Do you really want to delete this task type? This process cannot be undone.");
    //    parameters.Add("ButtonText", "Delete");
    //    parameters.Add("Color", Color.Error);

    //    var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

    //    var dialog = DialogService.Show<ConfirmationDialog>("Delete task type", parameters, options);
    //    var result = await dialog.Result;

    //    if (!result.Cancelled)
    //    {
    //        await noteService.DeleteTask(taskTypeId);
    //        await ReloadData();
    //    }
    //}
    
}